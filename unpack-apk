#!/bin/bash
set -euo pipefail

# Defaults.
TP="$(dirname "$(readlink -f "$0")")"/third_party
APKTOOL="$TP"/apktool/apktool.jar
DEX2JAR="$TP"/dex2jar/d2j-dex2jar.sh
PROCYON="$TP"/procyon/procyon-decompiler.jar
VDEXEX="$TP"/vdexExtractor/bin/vdexExtractor

while getopts "a:d:j:v:" o; do
    case "$o" in
        a) APKTOOL="$OPTARG" ;;
        d) DEX2JAR="$OPTARG" ;;
        p) PROCYON="$OPTARG" ;;
        v) VDEXEX="$OPTARG" ;;
    esac
done
shift $((OPTIND-1))

if [[ ! -e "$APKTOOL" ]]; then
    echo "apktool not found at $APKTOOL. Try make -C ${TP} or pass the path to it with -a." >&2
    exit 1
fi

if [[ ! -e "$DEX2JAR" ]]; then
    echo "dex2jar not found at $DEX2JAR. Try make -C ${TP} or pass the path to it with -d." >&2
    exit 1
fi

if [[ ! -e "$PROCYON" ]]; then
    echo "procyon-decompiler not found at $JD_CLI. Try make -C ${TP} or pass the path to it with -p." >&2
    exit 1
fi

if [[ ! -e "$VDEXEX" ]]; then
    echo "jd-vdexExtractor not found at $VDEXEX. Try make -C ${TP} or pass the path to it with -v." >&2
    exit 1
fi

apk="$(readlink -f "$1")"
framework="${2:-}"
if [[ "$framework" ]]; then
    framework="$(readlink -f "$framework")"
fi


apktool() {
    java -jar "$APKTOOL" "$@"
}

procyon() {
    java -jar "$PROCYON" "$@"
}

outdir="${apk%.apk}"
if [[ "$outdir" == "$apk" ]]; then
    outdir="${apk}.out"
fi

if [[ -e "$outdir" ]]; then
    echo "Destination directory '$outdir' already exists, can't continue." >&2
    exit 1
fi

# Main code starts here.

echo "Unpacking $apk to $outdir"

tmpdir="$(mktemp -d)"
trap "rm -rf '$tmpdir'" EXIT
cd "$tmpdir"

# .apk for apktool and dex2jar to work with.
tmpapk="${tmpdir}/$(basename "$apk")"
cp -v "$apk" "$tmpapk"

# Add classes.dex from .vdex, if present.
apkdir="$(dirname "$apk")"
vdex="$(find "$apkdir" -type f -name '*.vdex')"
if [[ "$vdex" ]]; then
    # If there is more than one match from find, the -f will test for "foo.vdex bar.vdex" and fail.
    if [[ ! -f "$vdex" ]]; then
        echo "Multiple *.vdex files found in $apkdir, can't continue." >&2
        exit 1
    fi

    echo "Generating classes*.dex from $vdex"

    # Extract to $tmpdir.
    "$VDEXEX" -i "$vdex" -o "$tmpdir"

    # vdexExtractor names the generated files foo_classes*.dex if the input file was called foo.vdex,
    # and dex2jar expects classes*.dex, so remove any prefix.
    for dex in *.dex; do
        new="${dex##*_}"
        if [[ "$new" != "$dex" ]]; then
            mv -v "$dex" "$new"
        fi
    done

    # Stuff classes*.dex back into the .apk.
    for dex in *.dex; do
        case "$dex" in
            classes*.dex)
                zip "$tmpapk" "$dex" # Tested with Info-ZIP 3.0.
                rm -vf "$dex" # There is zip -m (move), but who knows which zips support that.
                ;;
            *)
                echo "Unknown file '$dex' generated by vdexExtractor (not matching classes*.dex)" >&2
                exit 1
                ;;
        esac
    done
fi

tmpout="${tmpdir}/_out" # To move to $outdir.

# Add framework apks for apktool.
fwargs=() # --frame-path for apktool if necessary
if [[ "$framework" ]]; then
    fwargs=(-p "${tmpdir}/_framework")
    find "$framework" -name '*.apk'|while read apk; do
        apktool install-framework "${fwargs[@]}" "$apk"
    done
fi

# Unpack .apk with apktool.
apktool decode "${fwargs[@]}" -o "$tmpout" "$tmpapk"

# Make .jar from .apk.
if ! "$DEX2JAR" -o "$tmpout"/classes.jar "$tmpapk"; then
    echo "Couldn't create classes.jar from .apk, skipping decompilation." >&2
else
    # Decompile .jar.
    if ! procyon "$tmpout"/classes.jar -o "$tmpout"/java; then
        echo "Warning: procyon failed, adding .partial suffix to decompilation result directory." >&2
        mv -v "$tmpout"/java "$tmpout"/java.partial
    fi
fi

# Move.
mv -vf "$tmpout" "$outdir"
echo "Successfully unpacked $apk to $outdir"
